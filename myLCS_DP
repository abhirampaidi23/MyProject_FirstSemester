#DYNAMIC PROGRAMMING
import argparse 
import random
if __name__ == '__main__' : 
 parser = argparse.ArgumentParser(
                    prog = 'myLCS_DP',
                    description = 'Returns the length of the longest common subsequence of two DNA sequences. ') 
 parser.add_argument('--S1', help='Enter the first DNA sequence after typing "--S1" , " '' " if you wish to enter empty string/no input. Please give a space after your input.')
 parser.add_argument('--S2', help='Enter the second DNA sequence after typing "--S2", " '' " if you wish to enter empty string/no input. Please give a space after your input.')
 parser.add_argument('--n', type= int, help='After typing "--n", enter value of n to create two random DNA sequences of length n,enter 0 if you do not wish to enter value of n. Please give a space after your input.') 
 args= parser.parse_args()
s1= args.S1
s2= args.S2
n1= args.n 
if(len(s1)!=0 and len(s2)!=0):
  matrix1=[]
  for i in range(len(s1)+1):
    l=[]
    for j in range(len(s2)+1):
      l.append(0)
    matrix1.append(l)   
  for i in range(len(s1)+1):
      for j in range(len(s2)+1):
          if i == 0 or j == 0:
              matrix1[i][j] = 0
          elif s1[i-1] == s2[j-1]:
            matrix1[i][j] = matrix1[i-1][j-1] + 1
          else:
              matrix1[i][j] = max(matrix1[i-1][j], matrix1[i][j-1])
  print("Intermediate table of values: ")
  for i in range(len(s1)+1):
    print(matrix1[i])
  print("Given sequence 1: "+ s1)
  print("Given sequence 2: "+ s2)
  print("The longest common subsequence has a length of "+ str(matrix1[len(s1)][len(s2)]))
elif(n1>0) :
  DNA=['A','C','G','T']
  random_seq1=[]
  random_seq2=[]
  S_1=''
  S_2=''
  for i in range(n1):
    random_seq1.append(random.choice(DNA))
  S_1=''.join(random_seq1)
  for i in range(n1):
    random_seq2.append(random.choice(DNA))
  S_2=''.join(random_seq2)
  matrix2=[]
  for i in range(len(S_1)+1):
    l1=[]
    for j in range(len(S_2)+1):
      l1.append(0)
    matrix2.append(l1)   
  for i in range(len(S_1)+1):
      for j in range(len(S_2)+1):
          if i == 0 or j == 0:
              matrix2[i][j] = 0
          elif S_1[i-1] == S_2[j-1]:
            matrix2[i][j] = matrix2[i-1][j-1] + 1
          else:
              matrix2[i][j] = max(matrix2[i-1][j], matrix2[i][j-1])  
  print("Intermediate table of values: ")
  for i in range(len(S_1)+1):
    print(matrix2[i])
  print("Randomly generated sequence 1 of length "+ str(n1)+" is: "+ S_1)
  print("Randomly generated sequence 2 of length "+ str(n1)+" is: "+ S_2)
  print("The longest common subsequence has a length of "+ str(matrix2[len(S_1)][len(S_2)]))
else :
  DNA=['A','C','G','T']
  r_seq1=[]
  r_seq2=[]
  Seq1=''
  Seq2=''
  for i in range(12):
    r_seq1.append(random.choice(DNA))
  Seq1=''.join(r_seq1)
  for i in range(12):
    r_seq2.append(random.choice(DNA))
  Seq2=''.join(r_seq2)
  matrix3=[]
  for i in range(len(Seq1)+1):
    l2=[]
    for j in range(len(Seq2)+1):
      l2.append(0)
    matrix3.append(l2)   
  for i in range(len(Seq1)+1):
      for j in range(len(Seq2)+1):
          if i == 0 or j == 0:
              matrix3[i][j] = 0
          elif Seq1[i-1] == Seq2[j-1]:
            matrix3[i][j] = matrix3[i-1][j-1] + 1
          else:
              matrix3[i][j] = max(matrix3[i-1][j], matrix3[i][j-1])  
  print("Intermediate table of values: ")
  for i in range(len(Seq1)+1):
    print(matrix3[i])
  print("Randomly generated sequence 1 of length "+ str(len(Seq1))+" is: "+ Seq1)
  print("Randomly generated sequence 2 of length "+ str(len(Seq2))+" is: "+ Seq2)
  print("The longest common subsequence has a length of "+ str(matrix3[len(Seq1)][len(Seq2)]))
